worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    log_format  main_timed  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time $pipe $upstream_cache_status';

    access_log /dev/stdout main_timed;
    error_log /dev/stderr notice;

    keepalive_timeout 65;

    server_tokens off;

    # Disable gzip compression for internal traffic
    gzip off;
    # gzip_types text/css text/x-component application/x-javascript application/javascript text/javascript text/x-js text/richtext text/plain text/xsd text/xsl text/xml image/bmp application/java application/msword application/vnd.ms-fontobject application/x-msdownload image/x-icon application/json application/vnd.ms-access video/webm application/vnd.ms-project application/x-font-otf application/vnd.ms-opentype application/vnd.oasis.opendocument.database application/vnd.oasis.opendocument.chart application/vnd.oasis.opendocument.formula application/vnd.oasis.opendocument.graphics application/vnd.oasis.opendocument.spreadsheet application/vnd.oasis.opendocument.text audio/ogg application/pdf application/vnd.ms-powerpoint image/svg+xml application/x-shockwave-flash image/tiff application/x-font-ttf audio/wav application/vnd.ms-write application/font-woff application/font-woff2 application/vnd.ms-excel;

    # Forward the cloudfront scheme from upstream - uncomment if needed
    map "$http_cloudfront_forwarded_proto$http_x_forwarded_proto" $forwarded_scheme {
         default off;
         "~*(https)" on;
     }

    # Include custom nginx configuration if it exists
    # include /usr/src/wordpress/nginx.con*;

    # Optimize open file cache
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    server {
        listen [::]:80 default_server;
        listen 80 default_server;
        server_name _;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;

        # More balanced proxy buffer settings
        proxy_buffer_size 16k;       # For headers (default is 4k)
        proxy_buffers 8 8k;          # 8 buffers of 8k each = 64k total
        proxy_busy_buffers_size 16k; # Can send while receiving

        # Upload limit
        client_max_body_size 50m;
        client_body_buffer_size 128k;

        root /usr/src/wordpress;
        index index.php;

        # Protect System Files - Essential security
        location = /nginx.conf { deny all; }
        location ~ /\.htaccess$ { deny all; }
        location ~ /wp-config.php$ { deny all; }
        location ~ ^/wp-admin/includes/ { deny all; }
        location ~ ^/wp-includes/[^/]+\.php$ { deny all; }
        location ~ ^/wp-includes/js/tinymce/langs/.+\.php$ { deny all; }
        location ~ ^/wp-includes/theme-compat/ { deny all; }
        location ~ ^.*/\.git/.*$ { deny all; }
        location ~ ^.*/\.svn/.*$ { deny all; }

        # Optional: Uncomment to block readme files if needed
        # location ~ /readme\.html$ { deny all; }
        # location ~ /readme\.txt$ { deny all; }

        # Redirect requests for autodiscover.xml to autodiscover.<tld>
        location ~ autodiscover.(xml|src)$ {
            rewrite ^(.*)$ https://autodiscover.$host$request_uri break;
            return 301 $scheme://autodiscover.$host$request_uri;
        }

        # Disable PHP in Uploads - Essential security
        location ~ ^/wp\-content/uploads/.*\.(?:php[1-8]?|pht|phtml?|phps)$ { deny all; }

        # Optional: Uncomment if you want to disable PHP in plugins/themes
        # location ~ ^/wp\-content/plugins/.*\.(?:php[1-8]?|pht|phtml?|phps)$ { deny all; }
        # location ~ ^/wp\-content/themes/.*\.(?:php[1-8]?|pht|phtml?|phps)$ { deny all; }

        # Optional: Uncomment to disable XML-RPC
        # location ~ xmlrpc.php { deny all; }

        # Optional: Uncomment to block WordPress user enumeration
        # if ($args ~* "^author=([0-9]+|{num:[0-9]+)") {
        #     return 403;
        # }
        # if ($request_uri ~ "/author/") {
        #     return 403;
        # }
        # if ($request_uri ~ "wp-sitemap-users-[0-9]+.xml") {
        #     return 403;
        # }

        # WordPress REST API User Enumeration - consider if needed
        # if ($request_uri ~ "/wp-json/wp/v2/users") {
        #     return 403;
        # }

        # redirect server error pages to the static page /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/lib/nginx/html;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            log_not_found off;
            access_log off;
        }

        # Based on https://codeable.io/wordpress-developers-intro-to-docker-part-two/
        # location /wp-content {
        #     root /usr/src/wordpress;
        #     expires 7d;
        #     add_header Cache-Control "public";
        # }

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to index.php
            try_files $uri $uri/ /index.php?$args;
        }

        # Serve static files directly, bypass PHP
        location ~* \.(jpg|jpeg|gif|png|avif|css|js|ico|webp|webm|mp4|mpeg|mpg|mpe|avi|avifs|svg|woff|woff2)$ {
            access_log off;
            expires max;
            add_header Cache-Control "public";
            log_not_found off;
            try_files $uri =404;
        }

        # pass the PHP scripts to FastCGI server listening on Unix socket
        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;

            #fastcgi_intercept_errors on;
            fastcgi_buffer_size 16k;       # For headers
            fastcgi_buffers 16 4k;         # 16 buffers of 4k each = 64k total
            fastcgi_busy_buffers_size 16k; # Can send while receiving

            fastcgi_index index.php;
            fastcgi_pass unix:/tmp/php-fpm.sock;

            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;

            # Forward the scheme from upstream
            fastcgi_param HTTPS $forwarded_scheme;

            fastcgi_buffering on;
            fastcgi_request_buffering on;
        }

        # deny access to . files, for security
        location ~ /\. {
            log_not_found off;
            deny all;
        }

        location ~ \.(html|htm|rtf|rtx|txt|xsd|xsl|xml)$ {
            expires 180s;
            etag on;
            if_modified_since exact;
            add_header Pragma "public";
            add_header Cache-Control "public";
            try_files $uri $uri/ /index.php?$args;
        }
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # Consider adding a Content-Security-Policy (CSP) for more robust security.
        # This is a placeholder; a real CSP needs careful configuration.
        # add_header Content-Security-Policy "default-src 'self';" always;
        
    }
}
